<script>
import ACell from './a-cell.stml';
import AIcon from './a-icon.stml';
import {mixedClass, syncModel} from "./index";

export default {
  name: "a-field",
  data() {
    return {
      value: this.props.value,
      isFocus: false
    }
  },
  install() {
    this.render = props => {
      syncModel.call(this);
      const {h} = apivm;


      if (this.$model.value && this.$model.value()) {
        this.data.value = this.$model.value();
      }

      const attr = {
        value: this.data.value,
        class: 'a-field__control',
        onInput: this.handleOnInput,
        placeholder: props.placeholder,
        type: props.type || 'text',
        'keyboard-type': props['keyboard-type'] || 'default',
        'confirm-type': props['confirm-type'] || 'done',
        onfocus: _ => this.data.isFocus = true,
        onblur: _ => this.data.isFocus = false
      }

      if (props.type === 'password') { //安卓端支持
        delete attr['keyboard-type']
      }

      if (props.readonly) {
        attr.readonly = true;
        if (api.systemType === 'android') {
          attr.disabled = true;
        }
      }

      if (props.disabled) {
        attr.disabled = true;
      }

      return h(ACell, {
            title: props.label,
            class: mixedClass(`a-field ${props.class || ''} `, {
              'a-field--disabled': props.disabled
            }),
            icon: props['left-icon'],
            style: `${props.style || ''} `
          },
          h('template', {class: 'a-field__body', _slot: 'value'},
              h('input', attr)
          ),
          (props['clearable'] && this.data.value && this.data.isFocus && h('template', {
            _slot: 'right-icon',
            onClick: _ => this.onClean(_)
          }, h(AIcon, {
            name: 'delete-filling', color: '#c8c9cc'
          }))) || (props['right-icon'] && h('template', {_slot: 'right-icon'}, h(AIcon, {
            name: props['right-icon']
          })))
      );
    }
  },
  handleOnInput({detail: {value}}) {
    if (!this.props.readonly) {
      this.setValue(value, 'input');
    }
  },
  onClean(_) {
    this.setValue('', 'clean');
  },
  setValue(value, type) {
    const {fire, $model, data} = this;
    $model.value && $model.value(value);
    fire(type, {value});
    data.value = value;
  }
}
</script>

<style scoped>
.a-field__title {
  width: 88px;
}

.a-field__body {
  flex: 1;
}

.a-field__control {
  display: block;
  box-sizing: border-box;
  color: #323233;
  border: none;
  font-size: 14px;
  height: 24px;
  line-height: 24px;
  flex: 1;
  width: 100%;
}

.a-field--disabled {
  cursor: not-allowed;
  opacity: 0.3;
}
</style>