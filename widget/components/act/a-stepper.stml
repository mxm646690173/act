<script>
import AIcon from './a-icon.stml';
import {mixedClass, syncModel} from "./index";

export default {
  name: "a-stepper",

  data() {
    return {
      value: this.reviseValue(this.props.value)
    }
  },
  install() {

    this.render = props => {
      const {h} = apivm;
      syncModel.call(this);
      if (this.$model.value && this.$model.value()) {
        this.data.value = this.reviseValue(this.$model.value());
      }

      const [isMin, isMax] = this.range;

      return h('view', {
            class: `a-stepper ${props.class || ''}`,
            style: `${props.style || ''}`
          },
          h('view', {
                class: mixedClass('a-stepper__btn a-stepper__minus', {
                  'a-stepper__btn--disabled': isMin || props.disabled
                }),
                onClick: _ => isMin || props.disabled ? {} : this.handleClick(-1, _)
              },
              h(AIcon, {name: 'minus', size: 24, color: isMin || props.disabled ? '#c8c9cc' : '#323233'})),
          h('input',
              {
                class: mixedClass('a-stepper__input', {
                  'a-stepper__input--disabled': props.disabled
                }),
                value: this.data.value,
                onblur: this.handleBlur,
                'keyboard-type': props.integer ? 'number' : 'decimal',
                disabled: props.disabled || props['disable-input']
              }
          ),
          h('view', {
                class: mixedClass('a-stepper__btn a-stepper__plus', {
                  'a-stepper__btn--disabled': isMax || props.disabled
                }),
                onClick: _ => isMax || props.disabled ? {} : this.handleClick(1, _)
              },
              h(AIcon, {name: 'add', size: 24, color: isMax || props.disabled ? '#c8c9cc' : '#323233'}))
      );
    }
  },
  handleClick(change, _) {
    const {data, props} = this;
    change *= typeof props.step === 'undefined' ? 1 : props.step;
    const value = data.value + change;
    this.handleValue(value, 'click');
  },
  computed: {
    range() {
      return this.getRange(this.data.value);
    }
  },
  handleValue(value, type) {
    value = this.reviseValue(Number(value));
    const {fire, $model, data} = this;
    $model.value && $model.value(value);
    fire('change', {value, type});
    data.value = value;
  },
  handleBlur({detail: {value}}) {
    this.handleValue(value, 'blur');
  },
  reviseValue(value) {
    const {props} = this;
    const [isMin, isMax] = this.getRange(value);
    if (isMin) {
      value = props.min;
    } else if (isMax) {
      value = props.max;
    }

    if (props.integer) {
      value = Math.trunc(value);
    }

    return Number(value);
  },
  getRange(value) {
    value = Number(value);
    const props = this.props;
    if (!props || typeof props.min === 'undefined') this.props.min = 1;
    if (!props || typeof props.max === 'undefined') this.props.max = Infinity;
    return [value <= Number(props.min), value >= Number(props.max)];
  }
}
</script>

<style scoped>
.a-stepper {
  flex-flow: row nowrap;
}


.a-stepper__btn {
  margin: 0;
  padding: 2px;
  color: #323233;
  vertical-align: middle;
  background-color: #f2f3f5;
  border: 0 #FFF;
  cursor: pointer;
  text-align: center;
  line-height: 28px;
  font-size: 28px;
}

.a-stepper__minus {
  border-radius: 4px 0 0 4px;
}

.a-stepper__plus {
  border-radius: 0 4px 4px 0;
}

.a-stepper__input {
  box-sizing: border-box;
  width: 32px;
  height: 28px;
  margin: 0 2px;
  padding: 0;
  color: #323233;
  font-size: 14px;
  line-height: normal;
  text-align: center;
  vertical-align: middle;
  background-color: #f2f3f5;
  border: 0 #fff;
  border-radius: 0;
  -webkit-appearance: none;
}

.a-stepper__input--disabled {
  opacity: 0.5;
}

.a-stepper__btn--disabled {
  color: #c8c9cc;
  background-color: #f7f8fa;
  cursor: not-allowed;
}
</style>