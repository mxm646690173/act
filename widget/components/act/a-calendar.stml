<script>


import {dateFormat, syncModel} from "./index";
import APopup from './a-popup.stml';

export default {
  name: "a-calendar",
  data() {
    return {
      selectDay: [],
      subTitle: ''
    }
  },
  install() {

    syncModel.call(this);

    this.render = props => {

      const {h} = apivm;
      const now = new Date();


      if (!props.type) {
        props.type = 'single';
      }

      if (!props['min-date']) {
        props['min-date'] = new Date(now.setMonth(now.getMonth()));
      }
      if (!props['max-date']) {
        props['max-date'] = new Date(new Date(props['min-date']).setMonth(props['min-date'].getMonth() + 3));
      }

      (!this.data.subTitle) && (this.data.subTitle = dateFormat('Y-mm', props['min-date']));


      this.monthDiff = (props['max-date'].getFullYear() - props['min-date'].getFullYear()) * 12 + (props['max-date'].getMonth() - props['min-date'].getMonth());

      const dayNames = ['日', '一', '二', '三', '四', '五', '六'];
      const renderHeader = h('view', {
            class: 'a-calendar__header',
            onClick: _ => _.cancelBubble = true
          },
          props.title && h('text', {class: 'a-calendar__title'}, props.title),
          h('text', {class: 'a-calendar__subtitle'}, this.data.subTitle),
          h('view', {class: 'a-calendar__weekdays'},
              dayNames.map(name => h('text', {class: 'a-calendar__weekday'}, name))
          )
      )

      const renderFooter = h('safe-area', {
        class: 'a-calendar__footer safe-area',
        onClick: _ => {
          _.cancelBubble = true;
          this.$model['default-date'](this.data.selectDay);
          this.$model['show'](false);
        }
      }, h('text', {class: 'a-calendar__btn'}, '确认'))

      return h(APopup, {
            class: `a-calendar ${props.class || ''}`,
            style: `${props.style}`, position: 'bottom',
            closeable: true,
          }, renderHeader, this.renderBody(), renderFooter
      );

    }
  },
  renderBody() {
    const {h} = apivm;
    const {props} = this;

    const baseTime = props['min-date'].getTime();

    let offset = 0;

    this.monthList = Array.from({length: this.monthDiff + 1})
        .map((_, index) => {
          const month = new Date(new Date(baseTime).setMonth(props['min-date'].getMonth() + index));
          const dayOffset = new Date(month.getFullYear(), month.getMonth(), 1).getDay();
          const dayNumber = new Date(month.getFullYear(), month.getMonth() + 1, 0).getDate();
          const height = Math.ceil((dayOffset + dayNumber) / 7) * 64; // 64 是单元格的高度
          const heightOffset = offset += height;
          return {month, dayOffset, dayNumber, heightOffset, height};
        });


    return h('scroll-view', {
          class: 'a-calendar__body',
          scroll: 'y',
          onScroll: ({detail: {scrollTop = 0}}) => {
            let currentIndex = 0;
            for (let i = 0; i < this.monthList.length; i++) {
              if (scrollTop >= this.monthList[i].heightOffset) {
                currentIndex = i + 1;
              }
            }
            this.data.subTitle = dateFormat('Y-mm', this.monthList[currentIndex].month);
          }
        },
        ...this.monthList.map(monthInfo => {

              return h('view', {class: 'a-calendar__month'},
                  h('text', {
                    class: 'a-calendar__month-mark',
                    style: `height:${monthInfo.height}px;line-height:${monthInfo.height}px;`
                  }, monthInfo.month.getMonth() + 1),
                  this.renderDays(monthInfo)
              )
            }
        )
    )

  },
  renderDays(monthInfo) {

    const {h} = apivm;
    return h('view', {class: 'a-calendar__days'},
        ...Array.from({length: monthInfo.dayNumber}).map(
            (_, index) => {
              const currentDate = index + 1;
              const currentDateFormat = dateFormat('Y-mm-dd', new Date(monthInfo.month.getFullYear(), monthInfo.month.getMonth(), currentDate));

              const selected = this.data.selectDay.includes(currentDateFormat);

              return h('view', {
                    class: `a-calendar__day  ${selected ? 'a-calendar__selected-day' : 'a-calendar__selectable-day'}`,
                    style: index ? '' : `margin-left:${monthInfo.dayOffset * 14.285}%;`,
                    onClick: _ => this.handleDateCellClick(currentDateFormat, _)
                  },
                  false && h('text', {class: 'a-calendar__top-info'}, '顶部'),
                  h('text', {class: `a-calendar__day-num   ${selected ? 'a-calendar__selected-day' : 'a-calendar__selectable-day'}`}, currentDate),
                  false && h('text', {class: 'a-calendar__bottom-info'}, '顶部')
              )
            }
        )
    );
  },
  handleDateCellClick(currentDateFormat, ev) {

    ev.cancelBubble = true;

    if (this.props.type === 'single') {
      this.data.selectDay = [currentDateFormat];
    } else {
      this.data.selectDay.push(currentDateFormat);
    }
  }
}
</script>

<style scoped>
.a-calendar {
  background-color: #FFF;
}

.a-calendar__header {
  border-bottom: 2px solid #eee;
  flex-shrink: 0;
}


.a-calendar__title {
  font-size: 16px;
  height: 44px;
  font-weight: 500;
  line-height: 44px;
  text-align: center;
}


.a-calendar__subtitle {
  font-size: 14px;
  height: 44px;
  font-weight: 500;
  line-height: 44px;
  text-align: center;
}

.a-calendar__weekdays {
  flex-flow: row nowrap;
}


.a-calendar__weekday {
  flex: 1;
  font-size: 12px;
  height: 30px;
  line-height: 30px;
  text-align: center;
}

.a-calendar__body {
  flex: 1;
  overflow-y: scroll;
}

.a-calendar__month {
  position: relative;
}

.a-calendar__month-mark {
  position: absolute;
  color: rgba(242, 243, 245, 0.8);
  font-size: 160px;
  font-weight: bold;
  pointer-events: none;
  width: 100%;
  text-align: center;
  justify-content: center;
  display: flex;
  align-items: center;
  font-family: monospace;
}

.a-calendar__days {
  flex-flow: row wrap;
}


.a-calendar__day {
  width: 14.285%;
  height: 64px;
  font-size: 16px;
  cursor: pointer;
  justify-content: center;
  align-items: center;
}

.a-calendar__selected-day {
  color: #fff;
  background-color: #ee0a24;
  border-radius: 4px;
}

.a-calendar__selectable-day {
  color: #323233;
  background-color: transparent;
  border-radius: 0;
}

.a-calendar__footer {
  -webkit-flex-shrink: 0;
  flex-shrink: 0;
  padding: 0 16px;
  padding-bottom: constant(safe-area-inset-bottom);
  padding-bottom: env(safe-area-inset-bottom);
}

.a-calendar__btn {
  color: #fff;
  background-color: #ee0a24;
  border: 1px solid #ee0a24;
  height: 36px;
  margin: 8px;
  border-radius: 18px;
  line-height: 36px;
  text-align: center;
  box-sizing: border-box;
}

.a-calendar__top-info, .a-calendar__bottom-info {
  font-size: 10px;
  line-height: 14px;
}


</style>